services:
  # Loki - Log aggregation system
  loki:
    image: grafana/loki:2.9.0
    container_name: centralized-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config:/etc/loki
      - loki-data:/tmp/loki
    networks:
      - logging
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: centralized-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - logging
    depends_on:
      - loki
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail - Log collector
  promtail:
    image: grafana/promtail:2.9.0
    container_name: centralized-promtail
    volumes:
      - ./promtail/config:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - logging
    depends_on:
      - loki
    restart: unless-stopped

  # Log monitoring and alerting
  log-monitor:
    image: prom/alertmanager:v0.25.0
    container_name: centralized-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command: --config.file=/etc/alertmanager/alertmanager.yml --storage.path=/alertmanager
    networks:
      - logging
    restart: unless-stopped

  # Log analytics API
  log-api:
    build:
      context: ./log-api
      dockerfile: Dockerfile
    container_name: centralized-log-api
    ports:
      - "8888:8000"
    environment:
      - LOKI_URL=http://loki:3100
      - GRAFANA_URL=http://grafana:3000
    volumes:
      - ./log-api:/app
    networks:
      - logging
    depends_on:
      - loki
      - grafana
    restart: unless-stopped

volumes:
  loki-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  logging:
    driver: bridge
    name: centralized-logging
